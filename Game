#install pygame using terminal: pip install pygame
import pygame
import os

#initializes pygame
pygame.init()

# sets the window Width, Height
win_width = 1000
win_height = 500
win = pygame.display.set_mode((win_width, win_height))

# adds a caption to the window
pygame.display.set_caption("First Game")

# --IMAGES--

# adds background image & scales it !ADD IMG FILES!
bg_img = pygame.image.load('filename.png')
bg = pygame.transform.scale(bg_img, (win_width, win_height))

# adds a stationary image of your main character (!ADD IMG FILES!)
stationary = pygame.image.load(os.path.join("Hero", "standing.png"))

# adds the left animation images|!assuming there are 9 files!
left = [None]*10
for  picIndex in range(1,10):
  left[picIndex - 1] = pygame.image.load(os.path.join("Hero", "L" + str(picIndex) + ".png" ))
  
# adds the right animation images|!assuming there are 9 files!
right = [None]*10
for  picIndex in range(1,10):
  right[picIndex - 1] = pygame.image.load(os.path.join("Hero", "R" + str(picIndex) + ".png" ))
  
# Bullet Images !ADD IMG FILES!
bullet_img = pygame.transform.scale(pygame.image.load(os.path.join("Bullets", "bullets.png")), (10, 10))

  
# --Variables--

# creates variables for the character function
x = 250
y = 250

# assigns velocity x/y co-ord variable
vel_x = 10
vel_y = 10
move_left = False
move_right = False

# assigns jump var
jump = False

# used in the BG Image scroller
width = 1000 
i = 0

stepIndex = 0

def draw_game():
  global step_index
  # makes the screen refresh every iteration so you dont have image burn-in
  win.fill((0,0,0))
  player.draw(win)
  # delays loop by (milliseconds)
  pygame.time.delay(30)
  pygame.display.update()
  for bullet in player.bullets
    bullet.draw_bullet()
   
  # sets the start point of the image in the window and scrolls it to the left
  win.blit(bg, (i,0))
  win.blit(bg, (width + i, 0))
  if i == -width: 
    win.blit(bg, (width + i,0))
    i = 0
  i -= 1 
  
 
    
# --CLASSES--
class Hero:
  def __init__ (init, x, y):
    #walk
    self.x =x
    self.y =y
    self.vel_x = 10
    self.vel_y
    self.face_right = True
    self.face_left = False
    self.stepIndex = 0
    # jump
    self.jump = False
    self.bullets = []
    
    # creates a loop for the character animation images
  def draw(self, win)
    if self.stepIndex >= 36:
        self.stepIndex = 0
    if move_left:
      win.blit(left[self.stepIndex//4], (self.x, self.y))
      stepIndex += 1
    elif move_right:
      win.blit(right[self.stepIndex//4], (self.x, self.y))
      stepIndex += 1
    else:
      win.blit(stationary, (self.x, self.y))
    
  # Player Movement Left/Right
  def move_hero(init, userInput):
    if userInput[pygame.K_LEFT] and self.x >= 0:
      self.x -= self.vel_x
      self.face_left = True
      self.face_right = False
    elif userInput[pygame.K_RIGHT] and self.x <= win_width - 62:
      self.x += self.vel_x
      self.face_left = False
      self.face_right = True
    else:
      self.stepIndex = 0
      
  # Player Jump
  def jump_motion(self, userInput)
    if userInput[pygame.K_SPACE] and self.jump is False:
      self.jump = True
    if self.jump is True:
      self.y -= self.vel_y * 4 
      self.vel_y -= 1
    if self.vel_y < -10:
      self.jump = False
      self.vel_y = 10
      
   def direction(self):
      if self.face_right = True
        return 1 
      if self.face_left = True
        return -1
      
   def shoot(self):
      if userInput[pygame.K_f]:
        bullet = Bullet(self.x, self.y, self.direction())
        self.bullets.append(bullet)
      for bullet in self.bullets:
        bullet.move()
        
class Bullet:
  def __init__ (self, x, y, direction)
    self.x = x + 20
    self.y = y + 30
    self.direction = direction
    
  def draw_bullet(self)
    win.blit(bullet_img, (self.x, self.y))
    
  def move(self):
    if self.direction == 1
      self.x += 15
    if self.direction == -1
      self.x -= 15

class Enemy:
  def __init__ (init, x, y)
  
  
player = Hero(250, 290)

# --MAIN LOOP--
# keeps the display up and running
run = True
while run:
  
  # closes window when hitting |X|
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      run = False
  
  draw_game()
  
      
  # takes user input  
  userInput = pygame.key.get_pressed()
  
  # Player Movement
  player.move_hero(userInput)
  player.jump_motion(userInput)
  
  # Player Shoot
  player.shoot()
